#include <iostream>
#include <bits/stdc++.h>
#include <bitset>
using namespace std;

#define get(t, index) ((t >> (15 - index) * 8) & (0xff))

#define change(t, index, num) (t -= get(t, index) << (15 - index) * 8, \
                                t += num << (15 - index) * 8, \
                                t)

__uint128_t key = *(__uint128_t*) "\x01\x23\x45\x67\x89\xab\xcd\xef\xfe\xdc\xba\x98\x76\x54\x32\x10";
__uint128_t ctr = *(__uint128_t*) "\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff";
uint32_t w[44];

void print(__uint128_t t) {
	uint8_t* ptr = (uint8_t*)(&t);
	for (int i = 0; i < 4; ++i, printf(" "))
		for (int j = 0; j < 4; ++j)
            printf("%02x", ptr[((3-i) * 4 + (3-j))]);
	puts("");
}

const unsigned short sbox[256] = {
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
	0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
};

__uint128_t gf02[256] = {
	0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 
	0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e, 
	0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 
	0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 
	0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 
	0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 
	0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde, 
	0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 
	0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05, 
	0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25, 
	0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45, 
	0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65, 
	0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85, 
	0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5, 
	0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5, 
	0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5, 
};

__uint128_t gf03[256] = {
	0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11, 
	0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21, 
	0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71, 
	0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41, 
	0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1, 
	0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1, 
	0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1, 
	0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81, 
	0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a, 
	0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba, 
	0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea, 
	0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda, 
	0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a, 
	0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a, 
	0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a, 
	0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a, 
};

__uint128_t shift[7] = {*(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00",
						*(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00",
						*(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff",
						*(__uint128_t*) "\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
						*(__uint128_t*) "\x00\x00\x00\x00\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00",
						*(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00",
						*(__uint128_t*) "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00"};

uint8_t rcon[11] = { 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };

inline void KeyExpansion() {
	memcpy(w, (uint32_t*)&key, 16);
	for (int i = 4; i < 44; i++) {
		uint32_t temp = w[i - 1];
		if (i % 4 == 0) {
			// RotWord + SubWord
			temp = ((sbox[temp & 0xff] << 8 | sbox[temp >> 24]) << 8 | sbox[(temp >> 16) & 0xff]) << 8 | sbox[(temp >> 8) & 0xff];
			temp ^= rcon[i / 4];
		}
		w[i] = w[i - 4] ^ temp;
	}
}

inline __uint128_t trans(__uint128_t t) {
	__uint128_t f = t;
	uint8_t* ptr_t = (uint8_t*)(&t);
	uint8_t* ptr_f = (uint8_t*)(&f);
	ptr_f[ 1] = ptr_t[ 4];
	ptr_f[ 4] = ptr_t[ 1];
	ptr_f[ 2] = ptr_t[ 8];
	ptr_f[ 8] = ptr_t[ 2];
	ptr_f[ 3] = ptr_t[12];
	ptr_f[12] = ptr_t[ 3];
	ptr_f[ 6] = ptr_t[ 9];
	ptr_f[ 9] = ptr_t[ 6];
	ptr_f[ 7] = ptr_t[13];
	ptr_f[13] = ptr_t[ 7];
	ptr_f[11] = ptr_t[14];
	ptr_f[14] = ptr_t[11];
	return f;
}

inline __uint128_t subBytes(__uint128_t input) {
	uint8_t* ptr = (uint8_t*)(&input);
	for (int i = 0; i < 16; i++)
		ptr[i] = sbox[ptr[i]];
	return input;
}

inline __uint128_t shiftRows(__uint128_t input) {
	__uint128_t tmp = 0;
	for (int i = 0; i < 7; i++) {
		int shift_num = 24 - 8 * i;
		tmp |= (shift_num >= 0) ? ((input << shift_num) & shift[i]) : ((input >> -shift_num) & shift[i]);
	}
	return tmp;
}

inline __uint128_t mixColumns(__uint128_t input) {
	__uint128_t f = 0;
	uint8_t* ptr_t = (uint8_t*)(&input);
	uint8_t* ptr_f = (uint8_t*)(&f);
	for (int i = 0; i < 16; i++) {
		ptr_f[i] = ptr_t[(i + 8) % 16] ^ ptr_t[(i + 12) % 16] ^ gf02[ptr_t[i]] ^ gf03[ptr_t[(i + 4) % 16]];
	}
	return f;
}

inline __uint128_t addRoundKey(__uint128_t input, int Nr) {
	uint8_t* _input = (uint8_t*)(&input);
	uint8_t* _key = (uint8_t*)(&w) + 16 * Nr;
	for (int i = 0; i < 16; i += 4) {
		for (int j = 0; j < 4; j++) {
			_input[i + j] ^= _key[4 * j + i / 4];
		}
	}
	return input;
}

void removeSpaces(string &str) {
    str.erase(remove(str.begin(), str.end(), ' '), str.end());
}

__uint128_t add(__uint128_t a, __uint128_t b) {
    uint8_t* ptr_a = (uint8_t*)(&a);
    __uint128_t aa = 0;
    for (int i = 0; i < 16; i++) {
        uint8_t byte = ptr_a[i];
        aa = aa << 8;
        aa |= byte;
    }
    aa = aa + b;
    uint8_t* ptr = (uint8_t*)(&aa);
    __uint128_t _a = 0;
    for (int i = 0; i < 16; i++) {
        uint8_t byte = ptr[i];
        _a = _a << 8;
        _a |= byte;
    }
    return _a;
}

__uint128_t myreverse(__uint128_t result, const string& input) {
    uint8_t* ptr_result = (uint8_t*)(&result);
    __uint128_t _result = 0;
    for (int i = 0; i < 16; i++) {
        uint8_t byte = ptr_result[i];
        _result = _result << 8;
        _result |= byte;
    }
    _result = _result >> 4 * (32 - input.size());
	return _result;
}

__uint128_t exchange(const string& input) {
    __uint128_t result;
    uint64_t high = 0, low = 0;
    string _input = input;
	if (input.size() < 32) {
		for (int i = 0; i < (32 - input.size()); i++) {
			_input = _input + "0";
		}
	}
    istringstream iss(_input.substr(0, 16));
    iss >> hex >> high;
    istringstream iss2(_input.substr(16, 16));
    iss2 >> hex >> low;
    result = high;
    result = (result << 64) | low;
    if (input.size() < 32) {
        result = result >> 4 * (32 - input.size());
    }
	__uint128_t _result = myreverse(result, input);
    return _result;
}

int main(int argc, char** argv) {
	KeyExpansion();
	bool encrypt = true;
	char choice = argv[1][0];
	string number = argv[2];
	string path;
	string result;
	if (choice == 'e') {
		encrypt = true;
		path = "data/text_" + number + ".txt";
		result = "text_aes_128_ctr_" + number + ".txt";
	}
	else if (choice == 'd') {
		encrypt = false;
		path = "data/ciphertext_" + number + ".txt";
		result = "ciphertext_aes_128_ctr_" + number + ".txt";
	}
	else if (choice = 't') {
		encrypt = true;
		path = "input_8M.txt";
		result = "output_8M.txt";
	}
	else {
		cout << "Invalid argument" << endl;
		return 0;
	}
	ifstream fi(path);
	stringstream buffer;  
	buffer << fi.rdbuf();  
    fi.close();
	string contents(buffer.str());
	removeSpaces(contents);
	int len = contents.length();
	cout << len << endl;
	cout << "数据 = " << (double)len * 8 / 1000000 << "Mb" << endl;
	clock_t start_time = clock();
	double time = 0;
	ofstream fo(result);
	for (int i = 0; i < len; i += 32) {
        __uint128_t x = exchange(contents.substr(i, 32));
		__uint128_t ps = add(ctr, i / 32);
		cout << "before encrypt" << endl;
		print(ps);
		clock_t start = clock();
        ps = addRoundKey(trans(ps), 0);
		for (int k = 1; k < 10; k++) {
			ps = addRoundKey(mixColumns(shiftRows(subBytes(ps))), k);
		}
		ps = trans(addRoundKey(shiftRows(subBytes(ps)), 10));
		time_t end = clock();
		time += (double)(end - start) / CLOCKS_PER_SEC;
		cout << "after encrypt" << endl;
		print(ps);
		x = x ^ ps;
		uint8_t* ptr = (uint8_t*)(&x);
		int leng = 16;
		if (contents.substr(i, 32).length() != 32) {
			leng = contents.substr(i, 32).length() / 2;
		}
		for (int j = 0; j < leng; j++) {
			if ((i + 32) >= len && j == (leng - 1)) {
				fo << hex << setw(2) << setfill('0') << static_cast<unsigned int>(ptr[j]);
			}
			else {
			    fo << hex << setw(2) << setfill('0') << static_cast<unsigned int>(ptr[j]) << ' ';
			}
		}
	}
	time_t end_time = clock();
	fo.close();
	cout << "时间 = " << time << "s" << endl;
	cout << "效率 = " << (double)len * 8 / 1000000 / time << "Mbps" << endl;
	return 0;
}